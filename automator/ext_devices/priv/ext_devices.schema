{mapping, "device.$name.type", "ext_devices.devices", [
                                                      {default, echo },
                                                      {include_default, "default"},
                                                      {datatype, atom }
                                                     ]}.

{mapping, "device.$name.target.ip", "ext_devices.devices", [
                                                           {default, {"127.0.0.1", 9999} },
                                                           {include_default, "default"},
                                                           {datatype, ip}
                                                          ]}.

{mapping, "device.$name.target.type", "ext_devices.devices", [
                                                             {default, udp_bridge },
                                                             {include_default, "default"},
                                                             {datatype, atom}
                                                            ]}.

{mapping, "device.$name.target.user", "ext_devices.devices", [
                                                             {default, "none" },
                                                             {include_default, "default"}
                                                            ]}.

{mapping, "device.$name.target.pass", "ext_devices.devices", [
                                                             {default, "none" },
                                                             {include_default, "default"}
                                                            ]}.

%{ translation, "ext_devices.device", fun(_Conf) -> ok end}.
{
 translation,
 "ext_devices.devices",
 fun(Conf) ->
         TypesList = lists:filter(
                       fun({K, _V}) ->
                               cuttlefish_variable:is_fuzzy_match(K, string:tokens("device.$name.type", "."))
                       end,
                       Conf),
         TargetIpList = lists:filter(
                          fun({K, _V}) ->
                                  cuttlefish_variable:is_fuzzy_match(K, string:tokens("device.$name.target.ip", "."))
                          end,
                          Conf),
         TargetTypeList = lists:filter(
                            fun({K, _V}) ->
                                    cuttlefish_variable:is_fuzzy_match(K, string:tokens("device.$name.target.type", "."))
                            end,
                            Conf),

         UserList = lists:filter(
                            fun({K, _V}) ->
                                    cuttlefish_variable:is_fuzzy_match(K, string:tokens("device.$name.target.user", "."))
                            end,
                            Conf),
         PassList = lists:filter(
                            fun({K, _V}) ->
                                    cuttlefish_variable:is_fuzzy_match(K, string:tokens("device.$name.target.pass", "."))
                            end,
                            Conf),

         DevicesA = lists:zipwith3(
                    fun(
                      {[_, K, _], DeviceType},
                      {[_, K, _, _], Ip},
                      {[_, K, _, _], Type}) ->
                            { K, #{ device_type => DeviceType, target => #{ ip => Ip, type => Type} } }
                    end,
                    TypesList,
                    TargetIpList,
                    TargetTypeList),
         Devices = lists:zipwith3(
                    fun(
                      {K, M = #{ target := Target }},
                      {[_, K, _, _], User},
                      {[_, L, _, _], Pass} ) ->
                            {K, maps:put(target, maps:merge(Target, #{ user => User, pass => Pass}), M)}
                    end,
                    DevicesA,
                    UserList,
                    PassList),

%         Devices = lists:zipwith3(
%                    fun(
%                      {[_, K, _], DeviceType},
%                      {[_, K, _, _], Ip},
%                      {[_, K, _, _], Type}) ->
%                            { K, #{ device_type => DeviceType, target => #{ ip => Ip, type => Type } } }
%                    end,
%                    TypesList,
%                    TargetIpList,
%                    TargetTypeList),

         case Devices of
             [] ->
                 throw(unset);
             _ -> Devices
         end
 end}.
