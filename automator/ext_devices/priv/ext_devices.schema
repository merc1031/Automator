{mapping, "device.$name.type", "ext_devices.device", [
                                                      {default, echo },
                                                      {include_default, "default"},
                                                      {datatype, atom }
                                                     ]}.

{mapping, "device.$name.target.ip", "ext_devices.device", [
                                                           {default, {"127.0.0.1", 9999} },
                                                           {include_default, "default"},
                                                           {datatype, ip}
                                                          ]}.

{mapping, "device.$name.target.type", "ext_devices.device", [
                                                             {default, udp_bridge },
                                                             {include_default, "default"},
                                                             {datatype, atom}
                                                            ]}.

%{ translation, "ext_devices.device", fun(_Conf) -> ok end}.
{
 translation,
 "ext_devices.device",
 fun(Conf) ->
         TypesList = lists:filter(
                       fun({K, _V}) ->
                               cuttlefish_variable:is_fuzzy_match(K, string:tokens("device.$name.type", "."))
                       end,
                       Conf),
         TargetIpList = lists:filter(
                          fun({K, _V}) ->
                                  cuttlefish_variable:is_fuzzy_match(K, string:tokens("device.$name.target.ip", "."))
                          end,
                          Conf),
         TargetTypeList = lists:filter(
                            fun({K, _V}) ->
                                    cuttlefish_variable:is_fuzzy_match(K, string:tokens("device.$name.target.type", "."))
                            end,
                            Conf),

         Targets = [ {K, #{ target => #{ ip => Ip, type => Type } } } ||
                     {[_, K, _, _], Type} <- TargetTypeList,
                     {[_, K, _, _], Ip} <- TargetIpList],

         Types = [ {K, #{ device_type => Type } } || {[_, K, _], Type} <- TypesList],

         Devices = [ {K, maps:merge(Target, Type)} || {K, Type} <- Types, {K, Target} <- Targets],
         case Devices of
             [] ->
                 throw(unset);
             _ -> Devices
         end
 end}.
